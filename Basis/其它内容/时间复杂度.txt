时间复杂度：
计算机科学中，算法的时间复杂度是一个函数，它定性描述了该算法的运行时间。时间复杂度常用O表示，不包括这个函数的低阶项和首项系数

计算方法：一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得T(n)/f(n)的极限值（当n趋近于无穷大时）为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n))，称O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。次数T(n)是问题规模大小n的某个函数，T(n)/f(n)=C，O(f(n)) 为时间复杂度。

例：算法

for(i=1; i<=n; ++i)
{
    for(j=1; j<=n; ++j)
    {
        c[i][j] = 0;//该步骤属于基本操作执行次数：n的平方次
        for(k=1; k<=n; ++k)
            c[i][j] += a[i][k] * b[k][j];//该步骤属于基本操作执行次数：n的三次方次
    }
}
则有T(n)=n^3+n^2，因此我们可以确定n的三次方为T(n)的同数量级，即f(n)=n^3，然后根据T(n)/f(n)求极限可得到常数C，然而C并没有什么卵用。则该算法的时间复杂度：T(n) = O(n^3)



















