raid0到raid5的概念及与lvm的区别

-------进程管理和作业控制---------
pid 1 唯一一个由系统内核直接运行的进程

进程的类型：
1.交互进程，有一个shell启动的进程，可以运行在前端，也可以运行在后端
2.批处理进程，不予特定的终端相关联，提交到等待队列执行的进程
3.守护进程，在linux启动初始化运行的后台进程

进程的启动方式：
1.手工启动：
 1.1 前台启动，如：ls -l
 1.2 后台启动，如：& 命令

进程的管理：
ps 命令：
-a 显示所有进程
-e 在命令后显示环境变量
-u 显示用户名和时间等信息
-x 显示没有控制终端的进程
-f 显示进程树
-w 宽行显示


命令输出之后显示信息的含义：
PID 进程号
PPID 父进程
TTY  进程从哪个终端启动的
STAT 状态
  R 正在执行中
  S sleep
  T stop
  Z zombie 僵尸
  W 进程没有固定的pages
  N 低级的进程
START 开始执行的时间
VSZ 进程所占用的虚拟内存空间 -kb
RSS 进程所占用内存空间 -kb
CMD 命令行
USER 用户名
%CPU CPU 百分比
%MEM 内存百分比
size 大小 -kb

kill PID 结束进程

作业控制
控制当前正在运行的进程的行为

实施作业控制的常用命令
CMD & 表示命令在后台运行，不占用终端
CTRL+D 正常表示终止一个正在运行的进程
CTRL+C 强行终止一个正在运行的进程
CTRL+Z 强行挂起一个正在运行的前台进程

jobs 显示后台作业的被挂起的进程
bg 重启一个被挂起的作业，并在后台运行
fg 把一个在后台的作业放到前台来运行

sed
它是一个流编辑器。sed 非交互式的行编辑器，它是命令行中输入编辑指令，去处理指定的输入文件然后把结果输出到屏幕。
注意：sed不改变输入文件的内容，可以使用重定向保存输出文件

1.从输入读取一行数据，放入缓冲区，这个缓冲区称为模式空间，pattern space
2.按照指定的sed编辑命令处理缓冲区的数据
3.把处理的结果显示并从缓冲区里删除该语句（从模式空间）
4.读取下一行，重复上面的步骤。

sed 命令格式
格式1：
sed 选项 [-e] [command1] [input-file] [-e] [command2] [input-file] [-e] [command3] [input-file] 注意只有一个的时候-e可以省略
格式2：
sed 选项 -e -f 脚本文件 [input -file]

-n 关闭输出自动输出结果
-r 使用正则表达式匹配
-e 执行动作命令
-f 执行filename内容
'' 包括整个命令
"" 包含shell变量
-i 修改原文件内容(危险操作)

支持25个操作
p 打印
d 删除
's 源数据/替换的数据/'  -- 只替换每行的第一次出现的
's 源数据/替换的数据/g' -- g全局替换

a 在指定的行全面要进行追加文件
i 在指定的行前面追加文件
c 用新文本替换指定的行

显示第三行的数据
sed 3p -n test.txt

显示第三行开始步长为5的行
sed 3~5p -n test.txt 

sed 3,5p -n test.txt 

删除奇偶行
sed '1~2d' test.txt
sed '1~2!d' test.txt

sed -n /sad/p test.txt 

正则表达式

替换命令

替换行首的空格
sed 's/^ //' test.txt

替换所有空白
sed 's/ //g' test.txt

替换所有标点符号(, . ?...)
sed -e 's/\,//g' -e 's/\?//g' ...

删除所有标点
sed s/'\W'/''/g

[:punct:] 标点符号集
[:lower:] 小写字母集
[:upper:] 大写字母集
[:space:] 所有空白字符集
[:alpha:] 字母集
[:digit:] 数字集
[:alnum:] 数字和字母集

sed 's/sad/happy/p' -n test.txt 将所有行第一次出现的sad替换成happy，并只打印被替换的行
sed 's/happy/sad/gp' -n test.txt 将所有行出现的所有sad替换成happy，并只打印被替换的行

