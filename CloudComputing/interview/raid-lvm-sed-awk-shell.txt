***************
  raid的概念
***************
RAID全称是独立磁盘冗余阵列(Reduandant Array of Independent Disks),基本思想是把多个磁盘组合成一个磁盘阵列组，使得性能大幅提高。RAID分为几个不同的等级，各个不同的等级均在数据可靠性及读写性能做了不同的权衡
  1.1RAID0 称为条带化存储，将数据分段存储在各个磁盘中，读写均可并行处理，因此读写速率加快，是单个磁盘的N倍，缺点是任何一个磁盘的损坏就会导致数据不可用。mdadm -C /dev/md11 -a yes -l 1 -n 2 /dev/sd{b1,c1}
  1.2RAID1 是镜像存储，没有数据校验，数据被同等的写入到2个或多个磁盘中，因此写入速度相对慢，但是读取速度快，优点是不会因为一个磁盘的损坏导致数据的丢失。
  1.3RAID5 将一个校验盘分到分到每个磁盘上，而不是单独用一个磁盘作为校验盘，这样容错率和效率都有改善。
  1.4混合RAID 如两个RAID0做成一个RAID1,或两个RAID1做成一个RAID0

创建一个RAID5
mdadm -C /dev/md0 -l5 -n3 -x1 /dev/sd{i,j,k,l}
创建raid5有3个盘工作，一个备份，2个存储，一个x1热备盘




***************
  lvm的操作
***************
lvm logical volumn manegement

最下层是pv，即物理卷，多个物理卷创建成一个卷组，通过卷组对逻辑卷分配容量，通过这种方法创建的lvm更方便的对分区进行管理，可以对分区进行添加物理卷进行extend扩容和缩减reduce。




***************
  sed命令
***************


语法 sed [-hnV] [-e<script>][-f<script文件>][文本文件]
sed -e ‘操作’ 文件
参数说明
-e 以选项中指定的script来处理输入的文本文件
-f 以选项中指定的script文件来处理输入的文本文件
-h 显示帮助
-n 仅显示script处理后的结果
-V 显示版本信息
-i 直接修改文件内容(危险操作)

动作说明：

a 新增 a的后面可以接字串 而这些字串会在新的一行出现(目前的下一行)
c 取代，c的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
d 删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
i 插入，i的后面可以接字串而这些字串会在新的一行出现(目前的上一行)
p 打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行
s 取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正规表示法！例如 s/old/new/g 就是啦 g是全部改变，没有g只改变匹配到的第一个

{command;q} 执行命令,q退出
如：搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行：
nl /etc/passwd | sed -n '/root/{s/bash/blueshell/;p;q}'

增 a(ppend)/i(nsert) 删 d(elete) 改 c(hange)/s(ubstitute) 查p(rint)
如果同时执行多步aidcsp的话要加-e，但只有一步可以省略

新增/删除是以行为单位
替换与显示也是以行为单位
正则表达式放在//之间
$ 代表的是最后一行
nl 写一个文件进行标准输出，并添加行号
特殊形式：^a 以a开头，\防转义






************
 awk命令
************


一、基本用法
1.awk '{[pattern] action}' {filenames}   # 行匹配语句 awk '' 只能用单引号
2.awk -F  # -F相当于内置变量FS, 指定分割字符
3.awk -v  # 设置变量
4.awk -f {awk脚本} {文件名}

二、运算符
= += -= *= /= %= ^= **=	赋值
?:	C条件表达式
||	逻辑或
&&	逻辑与
~ ~!	匹配正则表达式和不匹配正则表达式
< <= > >= != ==	关系运算符
空格	连接
+ -	加，减
* / %	乘，除与求余
+ - !	一元加，减和逻辑非
^ ***	求幂
++ --	增加或减少，作为前缀或后缀
$	字段引用
in	数组成员

三、内建变量

$n	当前记录的第n个字段，字段间由FS分隔
$0	完整的输入记录
ARGC	命令行参数的数目
ARGIND	命令行中当前文件的位置(从0开始算)
ARGV	包含命令行参数的数组
CONVFMT	数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组
ERRNO	最后一个系统错误的描述
FIELDWIDTHS	字段宽度列表(用空格键分隔)
FILENAME	当前文件名
FNR	各文件分别计数的行号
FS	字段分隔符(默认是任何空格)
IGNORECASE	如果为真(=1时为真)，则进行忽略大小写的匹配
NF	一条记录的字段的数目
NR	已经读出的记录数，就是行号，从1开始
OFMT	数字的输出格式(默认值是%.6g)
OFS	输出记录分隔符（输出换行符），输出时用指定的符号代替换行符
ORS	输出记录分隔符(默认值是一个换行符)
RLENGTH	由match函数所匹配的字符串的长度
RS	记录分隔符(默认是一个换行符)
RSTART	由match函数所匹配的字符串的第一个位置
SUBSEP	数组下标分隔符(默认值是/034)

四、使用正则，字符串匹配
如：
输出第二列包含 "th"，并打印第二列与第四列
awk '$2 ~ /th/ {print $2,$4}' log.txt
~ 表示模式开始。// 中是模式。

五、忽略大小写
如：awk 'BEGIN{IGNORECASE=1} /this/' log.txt

六、模式取反
如：awk '$2 !~ /th/ {print $2,$4}' log.txt

七、awk脚本
关于awk脚本，我们需要注意两个关键词BEGIN和END。
BEGIN{ 这里面放的是执行前的语句 }
END {这里面放的是处理完所有的行后要执行的语句 }
{这里面放的是处理每一行时要执行的语句}

八、awk数组
AWK 可以使用关联数组这种数据结构，索引可以是数字或字符串。

AWK关联数组也不需要提前声明其大小，因为它在运行时可以自动的增大或减小。

数组使用的语法格式：

array_name[index]=value
array_name：数组的名称
index：数组索引
value：数组中元素所赋予的值

1.创建数组
接下来看一下如何创建数组以及如何访问数组元素：

$ awk 'BEGIN {
sites["runoob"]="www.runoob.com";
sites["google"]="www.google.com"
print sites["runoob"] "\n" sites["google"]
}'

2.删除数组元素
我们可以使用 delete 语句来删除数组元素，语法格式如下：
delete array_name[index]
删除命令没有输出

一些例子：
awk -F : '{if($1=="zhou") print $1,$3}' /etc/passwd  # 注意zhou用""引起来






**************
  shell脚本
**************

一、shell变量
1.注意，变量名和等号之间不能有空格
命名规范：
命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
中间不能有空格，可以使用下划线（_）。
不能使用标点符号。
不能使用bash里的关键字（可用help命令查看保留关键字）。

2.使用变量：
只要在变量名前加'$'即可，'{}'是可选的，有些地方需要

3.只读变量：
readonly var

4.删除变量：
unset var

5.变量类型：
1)局部变量：仅在当前shell实例中有效
2)环境变量：所有的程序才能访问环境变量，应该大写，环境变量是已经用export内置命令导出的变量。
3)shell变量：shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

6.单双引号的区别：
双引号里可以出现转义字符，也可以有变量

7.字符串的操作：
  string="runoob is a great site"
  7.1 获取字符串长度：${#string}
  7.2 截取字符串: ${string:1:4} 表示从第2个开始截取4个字符
  7.3 查找子字符串: `expr index "$string" in`  # 输出4

8.注释
  8.1 单行注释 #
  8.2 多行注释 :<<EOF  EOF 或者 :<<'  '或者:<<!  !


二、shell数组

1.数组定义：
array_name=(value1 value2 value3)
使用 @ 或 * 可以获取数组中的所有元素：${array_name[@]}
Bash Shell 只支持一维数组（不支持多维数组），数组元素的下标由0开始

2.获取数组的长度：
  2.1 获取元素的个数 ${#array_name[@]} 或者 ${#array_name[*]}
  2.2 获取单个元素的长度 ${#array_name[n]}

3.读取数组：
${array_name[index]}

  

三、shell传递参数

1.我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……


参数处理	说明
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。
	如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
	如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。


$* 与 $@ 区别：

相同点：都是引用所有参数。
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。



四、shell基本运算符

Shell 和其他编程语言一样，支持多种运算符，包括：

算数运算符
关系运算符
布尔运算符
字符串运算符
文件测试运算符

原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。

1.算术运算符：
a=10  b=20
+	加法	`expr $a + $b` 结果为 30。
-	减法	`expr $a - $b` 结果为 -10。
*	乘法	`expr $a \* $b` 结果为  200。
/	除法	`expr $b / $a` 结果为 2。
%	取余	`expr $b % $a` 结果为 0。
=	赋值	a=$b 将把变量 b 的值赋给 a。
==	相等。用于比较两个数字，相同则返回 true。	[ $a == $b ] 返回 false。
!=	不相等。用于比较两个数字，不相同则返回 true。  [ $a != $b ] 返回 true。

注意：
1) 表达式和运算符之间在空格
2) 完整的表达式要用``包含
3) * 要防转义
4) 只能做整数运算
5) 条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]

2.关系运算符
关系运算符只支持数字

-eq	检测两个数是否相等，相等返回 true。 [ $a -eq $b ] 返回 false。
-ne	检测两个数是否不相等，不相等返回 true。[ $a -ne $b ] 返回 true
-gt	检测左边的数是否大于右边的，如果是，则返回 true。	[ $a -gt $b ] 返回 false。
-lt	检测左边的数是否小于右边的，如果是，则返回 true。	[ $a -lt $b ] 返回 true。
-ge	检测左边的数是否大于等于右边的，如果是，则返回 true。[ $a -ge $b ] 返回 false。
-le	检测左边的数是否小于等于右边的，如果是，则返回 true。[ $a -le $b ] 返回 true。

3.布尔运算符

!	非运算，表达式为 true 则返回 false，否则返回 true。	[ ! false ] 返回 true。
-o	或运算，有一个表达式为 true 则返回 true。	[ $a -lt 20 -o $b -gt 100 ] 返回 true。
-a	与运算，两个表达式都为 true 才返回 true。	[ $a -lt 20 -a $b -gt 100 ] 返回 false。

4.逻辑运算符
&       逻辑 AND 
&&	逻辑的 AND	[[ $a -lt 100 && $b -gt 100 ]] 返回 false 相比于& ,&&如果第一个表达式为false，则不再计算第二个表达式。
||	逻辑的 OR	[[ $a -lt 100 || $b -gt 100 ]] 返回 true
这里用的是两个[[]]

4.字符串运算符

=	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
!=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
-z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
-n	检测字符串长度是否为0，不为0返回 true。	[ -n "$a" ] 返回 true。
str	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。

5.文件测试运算符


五、echo命令

1.显示普通字符串:
echo "It is a test" 或者 echo It is a test

2.显示转义字符：
echo "\"It is a test\""

3.显示变量：
read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量
read 的参数说明：
 -p 输入提示文字
 -n 输入字符长度限制(达到6位，自动结束)
 -t 输入限时
 -s 隐藏输入内容
例：
read -p "请输入一段文字:" -n 6 -t 5 -s password
echo -e "\npassword is $password"
输出：
请输入一段文字:
password is asdfgh

4.显示换行
echo -e "OK! \n" # -e 开启转义
echo "It is a test"

5.显示不换行
echo -e "OK! \c" # -e 开启转义 \c 不换行
echo "It is a test"

6.显示结果定向至文件(重定向)
echo "It is a test" > myfile

7.原样输出字符串，不进行转义或取变量(用单引号)
echo '$name\"'  # 输出结果：$name\"

8.显示命令执行结果
echo `date`  # 输出结果：Thu Jul 24 10:08:46 CST 2014


++++++++++++++小试牛刀++++++++++++++++
1.实现字符串的反序输出
2.实现输入任意个数字的平均值
3.实现数据库的定时备份
4.shell脚本对磁盘，cpu,内存，进行监控，并报警发到自己邮箱
5.












