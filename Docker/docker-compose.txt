文件配置

compose文件是一个定义服务、网络和卷的yaml文件。compose文件的默认路径是./docker-compose.yml(可以是.yml或.yaml)

可以使用 Bash 类 ${VARIABLE} 语法在配置值中使用环境变量

配置选项：
build：服务除了可以基于指定的镜像，还可以基于一份Dockerfile，在使用up启动之时执行构建任务，它可以指定Dockerfile所在文件夹的路径。Compose将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器，如：
build: ./dir


如果context中有指定的路径，并且可以选定Dockerfile的args。那么arg这个标签，就像Dockerfile中的ARG指令，可以在构建过程中指定环境变量，但是在构建成功后取消，在docker-compose.yml文件中也支持这样的写法:
version: '3'
services:
  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1

如果要指定image以及build，选项格式为：
build:   ./dir
image:   webapp:tag
这会在./dir下生成一个名为webapp和标记为tag的镜像



2.context
context选项可以是Dockerfile的文件路径，也可以是链接到git仓库的url，当提供的值是相对路径时，它被解析为相对于撰写文件的路径，此目录也是发送到Docker进程的context
build:
  context:  ./dir



3.dockerfile
使用此dockerfile文件来构建，必须指定构建路径
build:
  context:  .
  dockerfile:  Dockerfile-alternate


4.args
添加构建参数，这些参数是仅在构建过程中可以访问的环境变量
首先，在Dockerfile中指定参数：
ARG  buildno
ARG  password

RUN  echo  "Build number:  $buildno"
RUN  script-requiring-password.sh  "password"

然后指定build下的参数，可以传递映射或列表
build:
  context: .
  args:
    buildno: 1
    password: secret
或
build:
  context: .
  args:
    - buildno=1
    - password=secret


5.cache_from
编写缓存解析镜像列表
build:
  context: .
  cache_from:
    - alpine:latest
    - corp/web_app:3.14


6.labels
使用Docker标签将元数据添加到生成的镜像中，可以使用数组或字典。
建议使用反向DNS标记来防止签名与其他软件所使用的签名冲突
build:
  context:  .
  labels:
    com.example.description: "Accounting webapp"
    com.example.department: "Finance"
    com.example.label-with-empty-value: ""
或
build:
  context: .

  labels:

     - "com.example.description=Accounting webapp"

     - "com.example.department=Finance"

     - "com.example.label-with-empty-value"


7.shm_size
设置容器/dev/shm分区的大小，值为表示字节的整数值或表示字符的字符串
build:
    context:  .
    shm_size:  '2gb'
或
build:
  context: .
  shm_size: 10000000


8.target
根据对应的Dockerfile构建指定的stage
build:
    context: .
    target: prod


9.cap_add、cap_drop
添加或删除容器功能
cap_add:
  - ALL

cap_drop:
  - NET_ADMIN
  - SYS_ADMIN


10.command
覆盖容器启动后默认执行的命令
command: bundle exec thin -p 3000
该命令也可以是一个列表，方法类似于 dockerfile:
command: ["bundle", "exec", "thin", "-p", "3000"]


11.configs
使用服务configs配置为每个服务赋予相应的访问权限
注意：配置必须存在或在configs此堆栈文件的顶层中定义，否则堆栈部署失效

SHORT语法：只能指定配置名称，

LONG语法：提供了创建服务配置的更加详细的信息
source:Docker 中存在的服务配置的名称
target:要在服务的任务中装载的文件的路径或名称
可以指定uid和gid
node：在服务的任务容器中安装的文件的权限，以八进制表示法
可以同时授予多个配置的服务相应的访问权限


12.cgroup_parent
可以为容器选择一个可选的父cgroup
1.cgroup_parent: m-executor-abcd


13.container_name
自定义的容器指定从此名称，而不是使用默认的名称
container_name：my-web-container


14.credential_spec
为托管服务账户配置凭据规范，此选项仅适用于Windows容器服务


15.deploy
指定与部署的运行服务相关的配置
version: '3'

services:

    redis:

        image: redis:alpine

        deploy:

            replicas: 6

            update_config:

                parallelism: 2

                delay: 10s

            restart_policy:

                condition: on-failure
这里有几个子选项
1.endpoint_mode
指定连接到群组外部客户端服务发现方法

endpoint_mode:vip ：Docker 为该服务分配了一个虚拟 IP(VIP),作为客户端的 “前端“ 部位用于访问网络上的服务。
endpoint_mode: dnsrr : DNS轮询（DNSRR）服务发现不使用单个虚拟 IP。
 如果使用自己的负载平衡器，则DNS轮询调试(round-robin)i

version: "3.3"
...
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip
...
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr

2.labels
指定服务的标签，这些标签仅在服务上设置
version:  "3"
services:
    web:
        image:  web
        deploy:
            labels:
                 com.example.description: "This label will appear on the web service"

3.mode
global:每个集节点只有一个容器
replicated:指定容器数量

4.placement
指定constraints(限制)和preferences(偏好)
    deploy:

      placement:

        constraints:

          - node.role == manager

          - engine.labels.operatingsystem == ubuntu 14.04

        preferences:

          - spread: node.labels.zone

5.replicas
如果服务是replicated(默认)，需要指定运行的容器数量
    deploy:
      mode: replicated
      replicas: 6

6.resources
配置资源限制
    deploy:

      resources:

        limits:

          cpus: '0.50'

          memory: 50M

        reservations:

          cpus: '0.25'

          memory: 20M

7.restart_policy
配置容器的重新启动，代替restart
restart_policy:
        condition: on-failure   （condition的值可以为none，on-failure以及any(默认)）
        delay: 5s   尝试重启的等待时间，默认为0  
        max_attempts: 3   在放弃之前尝试重新启动容器次数
        window: 120s   在决定重新启动是否成功之前的等时间，指定为持续时间

8.update_config
配置更新服务，用于无缝更新应用
parallelism：一次性更新的容器数量
delay：更新一组容器之间的等待时间。
failure_action：如果更新失败，可以执行的的是 continue、rollback 或 pause （默认）
monitor：每次任务更新后监视失败的时间(ns|us|ms|s|m|h)（默认为0）
max_failure_ratio：在更新期间能接受的失败率
order：更新次序设置，top-first（旧的任务在开始新任务之前停止）、start-first（新的任务首先启动，并且正在运行的任务短暂重叠）（默认 stop-first）

    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first


16.设置映射列表，与Docker客户端的--device参数类似
devices:
  - "/dev/ttyUSB0:/dev/ttyUSB0"



17.depends_on
此选项解决了启动顺序的问题
在使用conpose时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没有启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是depends_on，这个标签解决了容器的依赖、启动先后的问题。

指定服务之间的依赖关系，有两种效果

docker-compose up 以依赖顺序启动服务，下面例子中redis和db服务在web启动前启动
docker-compose up SERVICE 自动包含SERVECE的依赖性，下面容器会先启动redis和db两个服务，最后才启动web服务：
version: '3'
services:
   web:
       build:  .
       depends_on:
           - db
           - redis
    redis:
        image: redis
    db:
        image: postgres

注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系



18.自定义DNS服务器，与--dns具有一样的用途，可以是单个值或列表
dns: 8.8.8.8
dns:
    - 8.8.8.8
    - 9.9.9.9



19.dns_search
自定义DNS搜索域，可以是单个值或列表
dns_search: example.com
dns_search:
   -  dc1.example.com
   -  dc2.example.com



20.tmpfs
挂载临时文件目录到容器内部，与run的参数一样效果，可以是单个值或列表
tmpfs: /run
tmpfs:
  - /run
  - /tmp



21.entrypoint
在容器启动时有效
在Dockerfile中有一个指令叫做ENTRYPOINT指令，用于指定接入点。在docker-compose.yml中可以定义接入点，覆盖Dockerfile中的定义：
entrypoint: /code/entrypoint.sh
entrypoint也可以是一个列表，方法类似于Dockerfile



21.env_file
从文件中添加环境变量，可以是单个值或是列表
如果已经用docker-compose -f FILE 指定了compose文件，那么env_file路径值为相对于该文件所在的目录
env_file: .env
或者根据docker-compose.yml设置多个：
env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env


22.environment
添加环境变量，可以使用数组或字典。与arg最大的不同是：这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，类似docker run -e；而arg只是构建过程中可以访问的环境变量
environment:
  RACK_ENV: development
  SHOW: 'true'
  SESSION_SECRET:

environment:
  - RACK_ENV=development
  - SHOW=true
  - SESSION_SECRET




23.expose
暴露端口，但不映射到宿主机，只被连接的服务访问。这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射还得ports这样的标签
expose:
 - "3000"
 - "8000"


24.external_links
链接到 docker-compose.yml 外部的容器


25. extra_hosts
添加主机名的标签，就是往 /etc/hosts 文件中添加一些记录
extra_hosts:
 - "somehost:162.242.195.82"
 - "otherhost:50.31.209.229"


26.healthcheck
用于检查测试服务使用的容器是否正常
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost"]
  interval: 1m30s
  timeout: 10s
  retries: 3
  start_period: 40s

interval，timeout 以及 start_period 都定为持续时间


27. image
从指定的镜像中启动容器，可以是存储仓库、标签以及镜像 ID
如果镜像不存在，Compose 会自动拉去镜像


28. isolation
Linux 上仅仅支持 default 值


29. labels
使用 Docker 标签将元数据添加到容器，可以使用数组或字典。


30.links
链接到其它服务的中的容器，可以指定服务名称也可以指定链接别名（SERVICE：ALIAS)，与 Docker 客户端的 --link 有一样效果，会连接到其它服务中的容器
web:
  links:
   - db
   - db:database
   - redis
使用的别名将会自动在服务容器中的 /etc/hosts 里创建。
172.12.2.186  db
172.12.2.186  database
172.12.2.187  redis
相应的环境变量也将被创建


31. logging
配置日志服务
logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"



32.network_mode
网络模式，用法类似于 Docke 客户端的 --net 选项，格式为：service:[service name]
network_mode: "bridge"

network_mode: "host"

network_mode: "none"

network_mode: "service:[service name]"

network_mode: "container:[container name/id]"
可以指定使用服务或者容器的网络


33. networks
加入指定网络
services:
  some-service:
    networks:
     - some-network
     - other-network


34. aliases
同一网络上的其他容器可以使用服务器名称或别名来连接到其他服务的容器
services:

  some-service:

    networks:

      some-network:

        aliases:

         - alias1

         - alias3

      other-network:

        aliases:

         - alias2


35. ipv4_address、ipv6_address
为服务的容器指定一个静态 IP 地址


36. PID
pid: "host"
将 PID 模式设置为主机 PID 模式，可以打开容器与主机操作系统之间的共享 PID 地址空间。使用此标志启动的容器可以访问和操作宿主机的其他容器，反之亦然。


37. ports
映射端口


38. secrets
通过 secrets为每个服务授予相应的访问权限


39. security_opt
为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签，比如设置全部服务的 user 标签值为 USER



40. stop_grace_period
在发送 SIGKILL 之前指定 stop_signal ，如果试图停止容器（如果它没有处理 SIGTERM（或指定的任何停止信号）），则需要等待的时间


41. stop_signal
设置另一个信号来停止容器。在默认情况下使用的 SIGTERM 来停止容器。设置另一个信号可以使用 stop_signal 标签：


42. sysctls
在容器中设置的内核参数，可以为数组或字典


43. ulimits
覆盖容器的默认限制，可以单一地将限制值设为一个整数，也可以将soft/hard 限制指定为映射


45. volumes
挂载一个目录或者一个已存在的数据卷容器，可以直接使用 HOST:CONTAINER 这样的格式，或者使用 HOST:CONTAINER:ro 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统


46. volumes_from
从其它容器或者服务挂载数据卷，可选的参数是 :ro 或 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的（默认情况为可读可写的）。


47. 用于服务、群集以及堆栈文件的卷
在使用服务，群集和 docker-stack.yml 文件时，请记住支持服务的任务（容器）可以部署在群集中的任何节点上，并且每次更新服务时都可能是不同的节点。


48. restart
默认值为 no ，即在任何情况下都不会重新启动容器；当值为 always 时，容器总是重新启动；当值为 on-failure 时，当出现 on-failure 报错容器退出时，容器重新启动。


49. 其他选项
关于标签：cpu_shares、cpu_quota、 cpuse、domainname、hostname、 ipc、 mac_address、privileged、 read_only、 shm_size、stdin_open、tty、 user、 working_dir

上面这些都是一个单值的标签，类似于使用 docker run 的效果


50. 持续时间
某些配置选项如 check 的子选项interval以及timeout 的设置格式
2.5s
10s
1m30s
2h32m
5h34m56s


51. 指定字节值
某些选项如 bulid 的子选项 shm_size
2b
1024kb
2048k
300m
1gb


52. extends
这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置
extends:
  file: common.yml
  service: webapp









